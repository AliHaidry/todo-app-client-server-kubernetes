{"version":3,"sources":["utils/APICalls.js","Components/WelcomeHeader/WelcomeHeader.js","Components/AddTodo/AddTodo.js","Components/ListTodo/ListTodo.js","Components/PageLoader/PageLoader.js","Components/Header/Header.js","Components/Login/Login.js","Components/Signup/Signup.js","utils/Helper.js","Components/App.js","serviceWorker.js","index.js"],"names":["axiosInstance","axios","create","baseURL","process","withCredentials","interceptors","response","use","res","error","Promise","reject","signout","post","then","user","data","login","email","password","signup","name","addTodo","title","description","todo","updateTodo","_id","important","done","fieldsToUpdate","patch","deleteTodo","delete","WelcomeHeader","props","userName","className","onClick","AddTodo","state","titleError","errMessage","validateInput","handleTitleChange","e","setState","target","value","handleDescriptionChange","resetInput","handleAddTodo","catch","message","this","onChange","label","background","size","maxLength","type","Component","ListTodo","todos","columns","field","sort","rows","initiateTodo","ps","fillTodoRows","striped","bordered","small","btn","PageLoader","height","width","require","Header","Login","invalidEmail","emptyPassword","loginFailed","errMsg","handleEmailInput","handlePasswordInput","validate","invalid","isEmail","handleSubmit","invalidField","status","md","icon","group","success","Signup","emptyName","signupFailed","handleNameInput","trim","signupDone","err","errmsg","errors","backToLogin","autoFocus","todoRecords","handleImportant","handleDone","map","rec","index","id","placement","tag","floating","App","init","loggedInUser","token","newTodo","handleDelete","toggleSignup","newState","logout","handleLogin","splice","length","handleSignout","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.adeaadbf.chunk.js","sourcesContent":["import axios from 'axios'\n\nconst axiosInstance = axios.create({\n    baseURL: process.env.REACT_APP_baseAPIURL,\n    withCredentials: true,\n});\n\naxiosInstance.interceptors.response.use(\n    res => {\n\n        return res;\n    },\n    error => {\n        return Promise.reject(error.response)\n    }\n);\n\nexport const signout = () => {\n    return axiosInstance.post(process.env.REACT_APP_baseAPIURL + '/logout').then(user => {\n        // delete axiosInstance.defaults.headers.common[\"Authorization\"];\n        return user.data\n    })\n}\n\n\nexport const init = () => {\n    return axiosInstance.post('/init').then(user => {\n        return user.data\n    })\n}\n\nexport const login = (email, password) => {\n    return axiosInstance.post('/login', {\n        email,\n        password\n    }).then(user => {\n        // axiosInstance.defaults.headers.common[\"Authorization\"] = `Bearer ${user.data.token}`;\n        return user.data\n    })\n}\n\nexport const signup = (name, email, password) => {\n    return axiosInstance.post('/signup', {\n        name,\n        email,\n        password\n    }).then(user => {\n        return user.data\n    })\n}\n\nexport const addTodo = (title, description) => {\n    return axiosInstance.post('/todo/add', {\n        title,\n        description\n    }).then(todo => {\n        return todo.data\n    })\n}\n\nexport const listTodo = () => {\n    //I have used post instead of get, read https://blog.teamtreehouse.com/the-definitive-guide-to-get-vs-post\n    return axiosInstance.post('/todo/list').then(todos => {\n        return todos.data\n    })\n}\n\n\nexport const updateTodo = (_id, important = null, done = null) => {\n    //I have used post instead of get, read https://blog.teamtreehouse.com/the-definitive-guide-to-get-vs-post\n    const fieldsToUpdate = {\n        _id\n    }\n\n    if (important !== null) {\n        fieldsToUpdate.important = important\n    }\n    if (done !== null) {\n        fieldsToUpdate.done = done\n    }\n    return axiosInstance.patch('/todo/update', fieldsToUpdate).then(todo => {\n        return todo.data\n    })\n}\n\n\nexport const deleteTodo = (_id) => {\n    //I have used post instead of get, read https://blog.teamtreehouse.com/the-definitive-guide-to-get-vs-post\n    return axiosInstance.delete('/todo/delete', {\n        data: {\n            _id,\n        }\n    }).then(todo => {\n        return todo\n    })\n}","import React from 'react';\nimport { MDBRow, MDBCol } from \"mdbreact\";\n\nimport './WelcomeHeader.css'\n\nexport default function WelcomeHeader(props) {\n    const { userName, signout } = props\n    return (\n        <MDBRow>\n            <MDBCol>\n                <span className=\"todo-welcome\" >{`Welcome ${userName}`}</span>\n            </MDBCol>\n            <MDBCol>\n                <div className=\"todo-logout\">\n                    <button className=\"signup\" onClick={() => { signout() }}>Sign-out</button>\n                </div>\n\n            </MDBCol>\n        </MDBRow>\n    );\n}\n\n","import React, { Component } from 'react';\nimport { MDBContainer, MDBRow, MDBCol, MDBInput } from \"mdbreact\";\nimport { addTodo } from '../../utils/APICalls'\nimport WelcomeHeader from '../WelcomeHeader/WelcomeHeader'\nimport './AddTodo.css'\n\nclass AddTodo extends Component {\n    state = {\n        title: '',\n        description: '',\n        done: false,\n        important: false,\n        titleError: false,\n        errMessage: ''\n    }\n\n    validateInput = () => {\n        return (!this.state.title) ? false : true\n    }\n    handleTitleChange = (e) => {\n        this.setState({\n            title: e.target.value,\n            titleError: false\n        })\n    }\n\n    handleDescriptionChange = (e) => {\n        this.setState({ description: e.target.value })\n    }\n\n    resetInput = () => {\n        this.setState({\n            title: '',\n            description: '',\n        })\n    }\n\n    handleAddTodo = () => {\n        this.setState({ errMessage: '' })\n\n        if (this.validateInput()) {\n            addTodo(this.state.title, this.state.description)\n                .then(todo => {\n                    this.props.addTodo({\n                        title: this.state.title,\n                        description: this.state.description,\n                        important: false,\n                        done: false,\n                        _id: todo.todo._id\n                    })\n                    this.resetInput()\n                })\n                .catch(error => {\n                    this.setState({ errMessage: error.data.message })\n                })\n        }\n        else {\n            this.setState({\n                titleError: true\n            })\n        }\n    }\n\n    render() {\n        const { userName, signout } = this.props\n        return (\n            <MDBContainer className=\"add-todo-main\">\n                <WelcomeHeader userName={userName} signout={signout} />\n                <MDBRow>\n                    <MDBCol>\n                        <MDBInput\n                            value={this.state.title}\n                            onChange={this.handleTitleChange}\n                            label=\"ToDo Title\"\n                            background\n                            size={(this.state.titleError) ? \"lg inputErrorDiv\" : \"lg\"}\n                            className={(this.state.titleError) ? \"inputError\" : \"\"}\n                            maxLength={100}\n                        />\n                        {\n                            (this.state.titleError) && <span className=\"error-text\"> ToDo Title cannot be blank.</span>\n                        }\n                    </MDBCol>\n                </MDBRow>\n                <MDBRow>\n                    <MDBCol>\n                        <MDBInput\n                            value={this.state.description}\n                            onChange={this.handleDescriptionChange}\n                            type=\"textarea\"\n                            label=\"ToDo Description\"\n                            background\n                            maxLength={250}\n                        />\n                    </MDBCol>\n                </MDBRow>\n                <MDBRow>\n                    <MDBCol className=\"align-right\">\n                        <button type=\"button\" onClick={this.resetInput} className=\"btn btn-outline-info-modified waves-effect\">Reset</button>\n                        <button type=\"button\" onClick={this.handleAddTodo} className=\"btn btn-outline-info-modified waves-effect\">Add</button>\n\n                    </MDBCol>\n                </MDBRow>\n            </MDBContainer>\n        );\n    }\n}\n\nexport default AddTodo;","import React, { Component } from 'react';\nimport { MDBContainer, MDBRow, MDBCol, MDBDataTable } from 'mdbreact';\nimport { listTodo } from '../../utils/APICalls'\nimport './ListTodo.css'\n\nclass ListTodo extends Component {\n    state = {\n        todos: {\n            columns: [\n                {\n                    label: '#',\n                    field: 'id',\n                    sort: 'asc',\n                },\n                {\n                    label: 'Title',\n                    field: 'title',\n                    sort: 'asc'\n                },\n                {\n                    label: 'Description',\n                    field: 'description',\n                    sort: 'asc'\n                },\n                {\n                    label: '',\n                    field: 'important',\n                    sort: 'disabled'\n                },\n                {\n                    label: '',\n                    field: 'done',\n                    sort: 'disabled'\n                },\n                {\n                    label: '',\n                    field: 'delete',\n                    sort: 'disabled'\n                }\n\n            ],\n            rows: [],\n            errMessage: ''\n        }\n    }\n\n\n    componentDidMount() {\n        listTodo()\n            .then(todos => {\n                this.props.initiateTodo(todos)\n            })\n            .catch(error => {\n                this.setState({ errMessage: error.data.message })\n            })\n\n        this.setState((ps) => ({\n            todos: {\n                ...ps.todos,\n                rows: this.props.fillTodoRows()\n            }\n        })\n        )\n    }\n\n    static getDerivedStateFromProps(props, state) {\n        const rows = props.fillTodoRows()\n\n        return {\n            todos: {\n                ...state.todos,\n                rows,\n                errMessage: ''\n            }\n        }\n    }\n\n    render() {\n        return (\n            <MDBContainer className=\"todo-table-main\" >\n                {\n                    (this.state.titleError) && <span className=\"error-text\"> ToDo Title cannot be blank.</span>\n                }\n                <MDBRow>\n                    <MDBCol>\n                        <MDBDataTable\n                            striped\n                            bordered\n                            small\n                            btn\n                            data={this.state.todos}\n                        />\n                    </MDBCol>\n                </MDBRow>\n            </MDBContainer>\n        );\n    }\n};\n\nexport default ListTodo;","import React from 'react';\nimport Loader from 'react-loader-spinner';\nrequire('./PageLoader.css')\n\nexport default function PageLoader() {\n    return (<Loader\n        type=\"Watch\"\n        height={100}\n        width={100}\n        className=\"pageLoader-main\"\n    />)\n}\n\n","import React from 'react';\nimport { MDBContainer } from \"mdbreact\";\nimport './Header.css'\n\nexport default function Header() {\n    return (\n        <MDBContainer className=\"header-main glow\">\n            ToDo App\n        </MDBContainer>\n    )\n}","import React, { Component } from \"react\";\nimport { MDBContainer, MDBRow, MDBCol, MDBInput } from 'mdbreact';\nimport validate from 'validator'\nimport './Login.css'\nimport { login } from '../../utils/APICalls'\n\nclass Login extends Component {\n    state = {\n        email: 'aamir@example.com',\n        password: 'aamir123',\n        invalidEmail: false,\n        emptyPassword: false,\n        loginFailed: false,\n        errMsg: ''\n    }\n\n\n    handleEmailInput = (e) => {\n        this.setState({\n            email: e.target.value,\n            invalidEmail: false\n        })\n    }\n    handlePasswordInput = (e) => {\n        this.setState({\n            password: e.target.value,\n            emptyPassword: false\n        })\n    }\n\n    validate = () => {\n        let invalid = false\n        if (!validate.isEmail(this.state.email)) {\n            invalid = \"invalidEmail\"\n        }\n        else if (this.state.password === \"\") {\n            invalid = \"emptyPassword\"\n        }\n\n        return invalid\n    }\n\n\n\n    handleSubmit = () => {\n        const invalidField = this.validate()\n        let errMsg\n        if (invalidField) {\n            this.setState({ [invalidField]: true })\n        }\n        else {\n            login(this.state.email, this.state.password)\n                .then(user => {\n                    this.props.login(user)\n                })\n                .catch(error => {\n                    if (error && error.status && error.status === 400) {\n                        errMsg = \"Incorrect username/password, please try again.\"\n                    }\n                    else {\n                        errMsg = \"Something went wrong, please try again later.\"\n                    }\n                    this.setState({\n                        loginFailed: true,\n                        errMsg\n                    })\n                })\n        }\n    }\n\n    render() {\n        const { errMsg } = this.state\n        const { signup } = this.props\n        return (\n            <MDBContainer className=\"login-todo-main\">\n                <MDBRow className=\"align-center\">\n                    <MDBCol md=\"6\">\n                        <p className=\"h5 text-center login-heading\">Sign in</p>\n                        <div className=\"grey-text\">\n                            <MDBInput\n                                label=\"Email:\"\n                                icon=\"envelope\"\n                                group\n                                type=\"email\"\n                                validate\n                                error=\"wrong\"\n                                success=\"right\"\n                                value={this.state.email}\n                                onChange={this.handleEmailInput}\n                                size={(this.state.invalidEmail) ? \"lg inputErrorDiv\" : \"lg\"}\n                                className={(this.state.invalidEmail) ? \"inputError\" : \"\"}\n                            />\n                            {\n                                (this.state.invalidEmail) && <span className=\"signup-error-text\"> Please type valid email address.</span>\n                            }\n                            <MDBInput\n                                label=\"Password: \"\n                                icon=\"lock\"\n                                group\n                                type=\"password\"\n                                validate\n                                value={this.state.password}\n                                onChange={this.handlePasswordInput}\n                                size={(this.state.emptyPassword) ? \"lg inputErrorDiv\" : \"lg\"}\n                                className={(this.state.emptyPassword) ? \"inputError\" : \"\"}\n                            />\n                            {\n                                (this.state.emptyPassword) && <span className=\"signup-error-text\">Password cannot be blank.</span>\n                            }\n                            {\n                                (this.state.loginFailed) && <span className=\"signup-error-text signin-bad-response\"> {errMsg}</span>\n                            }\n                        </div>\n                        <div className=\"text-center\">\n                            <button\n                                onClick={() => { this.handleSubmit() }}\n                                type=\"button\"\n                                className=\"btn Ripple-parent btn btn-outline-info-modified Ripple-parent waves-effect\">\n                                Login\n                            </button>\n                            <div>\n                                <button className=\"signup\" onClick={() => { signup() }}>Signup</button>\n                            </div>\n                        </div>\n                    </MDBCol>\n                </MDBRow>\n            </MDBContainer>\n        );\n    }\n}\n\nexport default Login;","import React, { Component } from 'react';\nimport { MDBContainer, MDBRow, MDBCol, MDBInput } from 'mdbreact';\nimport validate from 'validator'\nimport { signup } from '../../utils/APICalls'\nimport './Signup.css'\nclass Signup extends Component {\n    state = {\n        name: '',\n        email: '',\n        password: '',\n        emptyName: false,\n        invalidEmail: false,\n        emptyPassword: false,\n        signupFailed: false,\n        errMessage: ''\n    }\n\n    handleNameInput = (e) => {\n        this.setState({\n            name: e.target.value,\n            emptyName: false\n        })\n    }\n\n    handleEmailInput = (e) => {\n        this.setState({\n            email: e.target.value,\n            invalidEmail: false\n        })\n    }\n    handlePasswordInput = (e) => {\n        this.setState({\n            password: e.target.value,\n            emptyPassword: false\n        })\n    }\n    validate = () => {\n        let invalid = false\n        if (this.state.name.trim() === '') {\n            invalid = \"emptyName\"\n        }\n        else if (!validate.isEmail(this.state.email)) {\n            invalid = \"invalidEmail\"\n        }\n        else if (this.state.password.trim() === \"\") {\n            invalid = \"emptyPassword\"\n        }\n\n        return invalid\n    }\n\n    handleSubmit = () => {\n        const invalidField = this.validate()\n        if (invalidField) {\n            this.setState({ [invalidField]: true })\n        }\n        else {\n            signup(this.state.name, this.state.email, this.state.password)\n                .then(user => {\n                    this.props.signupDone()\n                })\n                .catch(error => {\n                    let err\n                    if (error.data.errmsg) {\n                        err = error.data.errmsg\n                    }\n                    else if (error.data.errors.password) {\n                        err = \"Invalid Password, must be atleast 7 letters.\"\n                    }\n                    else {\n                        err = error.data.message\n                    }\n                    this.setState({\n                        signupFailed: true,\n                        errMessage: err\n                    })\n                })\n        }\n    }\n\n    render() {\n        const { backToLogin } = this.props\n        return (\n            <MDBContainer className=\"login-todo-main\">\n                <MDBRow className=\"align-center\">\n                    <MDBCol md=\"6\">\n                        <p className=\"h5 text-center signup-heading\">Sign up</p>\n                        <div className=\"grey-text\">\n                            <MDBInput\n                                label=\"Your name\"\n                                icon=\"user\"\n                                group\n                                type=\"text\"\n                                validate\n                                error=\"wrong\"\n                                success=\"right\"\n                                autoFocus\n                                value={this.state.name}\n                                onChange={this.handleNameInput}\n                                size={(this.state.emptyName) ? \"lg inputErrorDiv\" : \"lg\"}\n                                className={(this.state.emptyName) ? \"inputError\" : \"\"}\n                            />\n                            {\n                                (this.state.emptyName) && <span className=\"signup-error-text\"> Name field cannot be blank.</span>\n                            }\n                            <MDBInput\n                                label=\"Your email\"\n                                icon=\"envelope\"\n                                group\n                                type=\"email\"\n                                validate\n                                error=\"wrong\"\n                                success=\"right\"\n                                value={this.state.email}\n                                onChange={this.handleEmailInput}\n                                size={(this.state.invalidEmail) ? \"lg inputErrorDiv\" : \"lg\"}\n                                className={(this.state.invalidEmail) ? \"inputError\" : \"\"}\n                            />\n                            {\n                                (this.state.invalidEmail) && <span className=\"signup-error-text\"> Please type valid email address.</span>\n                            }\n                            <MDBInput\n                                label=\"Your password\"\n                                icon=\"lock\"\n                                group\n                                type=\"password\"\n                                validate\n                                value={this.state.password}\n                                onChange={this.handlePasswordInput}\n                                size={(this.state.emptyPassword) ? \"lg inputErrorDiv\" : \"lg\"}\n                                className={(this.state.emptyPassword) ? \"inputError\" : \"\"}\n                            />\n                            {\n                                (this.state.emptyPassword) && <span className=\"signup-error-text\">Password cannot be blank.</span>\n                            }\n                            {\n                                (this.state.signupFailed) && <span className=\"signup-error-text signin-bad-response\"> Error: {this.state.errMessage}, please try again.</span>\n                            }\n                        </div>\n                        <div className=\"text-center\">\n                            <button\n                                type=\"button\"\n                                onClick={() => { this.handleSubmit() }}\n                                className=\"btn Ripple-parent btn btn-outline-info-modified Ripple-parent waves-effect\">\n                                Create User\n                            </button>\n                            <div>\n                                <button className=\"login-link\" onClick={() => { backToLogin() }}>Sign-in</button>\n                            </div>\n                        </div>\n                    </MDBCol>\n                </MDBRow>\n            </MDBContainer>\n        );\n    }\n};\n\n\n\nexport default Signup","import React from 'react';\nimport { MDBBtn, MDBIcon, MDBTooltip } from 'mdbreact';\n\n\nexport const fillTodoRows = (todoRecords, handleImportant, handleDone, deleteTodo) => {\n    const todos = todoRecords.map((rec, index) => {\n        return {\n            id: index + 1,\n            title: rec.title,\n            description: rec.description,\n            important: <div className=\"todoRow\">\n                <MDBTooltip\n                    placement=\"top\"\n                >\n                    <MDBBtn tag=\"a\" floating className=\"round-btn\" onClick={() => handleImportant(index, rec._id)} >\n                        <MDBIcon icon=\"star\" className={(rec.important) ? \"filled-yellow\" : \"\"} />\n                    </MDBBtn>\n                    <div>Mark Important</div>\n                </MDBTooltip>\n            </div>,\n            done: <div className=\"todoRow\">\n                <MDBTooltip\n                    placement=\"top\"\n                >\n                    <MDBBtn tag=\"a\" floating className=\"round-btn\" onClick={() => handleDone(index, rec._id)} >\n                        <MDBIcon icon=\"check\" className={(rec.done) ? \"filled-yellow\" : \"\"} />\n                    </MDBBtn>\n                    <div>Done</div>\n                </MDBTooltip>\n            </div>\n            ,\n            delete: <div className=\"todoRow\">\n                <MDBTooltip\n                    placement=\"top\"\n                >\n                    <MDBBtn tag=\"a\" floating className=\"round-btn\" onClick={() => deleteTodo(index, rec._id)} >\n                        <MDBIcon icon=\"trash-alt\" />\n                    </MDBBtn>\n                    <div>Remove</div>\n                </MDBTooltip>\n            </div>\n        }\n    })\n    return todos\n}","import React, { Component, Fragment } from 'react';\nimport AddTodo from './AddTodo/AddTodo'\nimport ListTodo from './ListTodo/ListTodo'\nimport PageLoader from './PageLoader/PageLoader'\nimport Header from './Header/Header'\nimport Login from './Login/Login'\nimport { init } from '../utils/APICalls'\nimport Signup from './Signup/Signup'\nimport './App.css'\nimport { updateTodo, deleteTodo, signout } from '../utils/APICalls'\nimport { fillTodoRows } from '../utils/Helper'\n\nclass App extends Component {\n  state = {\n    init: true,\n    loggedInUser: '',\n    token: '',\n    todos: [],\n    signup: false\n  }\n\n\n  componentDidMount() {\n    init()\n      .then(user => {\n        this.handleLogin(user)\n      })\n      .catch(error => {\n        this.setState({\n          init: false\n        })\n      })\n  }\n\n  addTodo = (newTodo) => {\n    this.setState((ps) => ({\n      todos: [...ps.todos, newTodo]\n    }))\n  }\n\n  initiateTodo = (todos) => {\n    this.setState({ todos })\n  }\n\n  fillTodoRows = () => fillTodoRows(this.state.todos, this.handleImportant, this.handleDone, this.handleDelete)\n\n  toggleSignup = () => {\n    this.setState((ps) => (\n      { signup: !ps.signup }\n    ))\n  }\n\n\n  handleImportant = (index, id) => {\n    updateTodo(id, !this.state.todos[index].important)\n      .then(todo => {\n        this.setState((ps) => {\n          const newState = ps\n          newState.todos[index].important = !newState.todos[index].important\n          return newState\n        })\n      })\n      .catch(error => {\n        this.setState({ errMessage: error })\n      })\n  }\n\n  handleDone = (index, id) => {\n    updateTodo(id, null, !this.state.todos[index].done)\n      .then(todo => {\n        this.setState((ps) => {\n          const newState = ps\n          newState.todos[index].done = !newState.todos[index].done\n          return newState\n        })\n      })\n      .catch(error => {\n        this.setState({ errMessage: error })\n      })\n  }\n\n  logout = () => {\n    this.setState({\n      loggedInUser: \"\",\n      token: \"\"\n    })\n  }\n\n  handleLogin = (user) => {\n    this.setState({\n      loggedInUser: user,\n      signup: false,\n      init: false\n    })\n  }\n\n  backToLogin = () => {\n    this.setState({\n      signup: false\n    })\n  }\n\n  handleDelete = (index, id) => {\n    deleteTodo(id)\n      .then(todo => {\n        this.setState((ps) => ({\n          todos: [...ps.todos.splice(0, index), ...ps.todos.splice(1, ps.todos.length)]\n        }))\n      })\n      .catch(error => {\n        this.setState({ errMessage: error })\n      })\n  }\n\n  handleSignout = () => {\n    signout()\n      .then(user => {\n        this.setState({\n          loggedInUser: '',\n          token: '',\n          todos: [],\n          signup: false\n        })\n      })\n      .catch(error => {\n        this.setState({ errMessage: error })\n      })\n  }\n\n  render() {\n    const userName = (this.state.loggedInUser) ? this.state.loggedInUser.user.name : \"\"\n    return <div className=\"app-main\">\n      <Header />\n      {(this.state.init) ?\n        <PageLoader />\n        : (this.state.signup)\n          ? <Signup backToLogin={this.backToLogin} signupDone={this.toggleSignup} />\n          : (!this.state.loggedInUser)\n            ? <Login login={this.handleLogin} signup={this.toggleSignup} />\n            : (\n              <Fragment>\n\n                <AddTodo\n                  userName={userName}\n                  addTodo={this.addTodo}\n                  signout={this.handleSignout}\n                />\n\n                <ListTodo\n                  initiateTodo={this.initiateTodo}\n                  todos={this.state.todos}\n                  fillTodoRows={this.fillTodoRows}\n                  handleImportant={this.handleImportant}\n                  handleDone={this.handleDone}\n                  deleteTodo={this.handleDelete}\n                />\n\n              </Fragment>\n            )\n      }\n    </div>\n\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App';\nimport * as serviceWorker from './serviceWorker';\nimport '@fortawesome/fontawesome-free/css/all.min.css';\nimport 'bootstrap-css-only/css/bootstrap.min.css';\nimport 'mdbreact/dist/css/mdb.css';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}